#include "MainApp.hpp"
#include <thread>
#include <mutex>
#include <iostream>
#include <filesystem>

#define IMGUI_DEFINE_MATH_OPERATORS
#include "imgui.h"
#include <kosongg/mINI.h>

#ifdef _USE_IFD_
#include <ImFileDialog.hpp>
#include <ImFileDialog_opengl.hpp>
#endif

#ifdef _USE_HSCPP_
#include "hscpp/Filesystem.h"
#include "hscpp/Hotswapper.h"
#include "hscpp/Util.h"
#include "hscpp/mem/Ref.h"
#include "hscpp/mem/MemoryManager.h"
#include "kosongg/HsCppProgress.hpp"
#endif

#include "Globals.hpp"
#include "watched/MainWidget.hpp"
#include "imkosongg/ImKosongg.hpp"

static std::unique_ptr<MainApp> g_mainapp;
static std::mutex g_mtxMainapp;

struct MainApp::Impl {
	std::unique_ptr<Globals> globals;
#ifdef _USE_HSCPP_
	std::unique_ptr<hscpp::Hotswapper> swapper;
	hscpp::mem::UniqueRef<hscpp::mem::MemoryManager> memoryManager;
#endif
	/* private implementations */
};

#ifndef _USE_HSCPP_
Globals * Globals::m_g;
#endif

MainApp *MainApp::GetInstance(/* dependency */) {
	std::lock_guard<std::mutex> lock(g_mtxMainapp);
	if (g_mainapp == nullptr) {
		struct MkUniqEnablr : public MainApp {};
		g_mainapp = std::make_unique<MkUniqEnablr>(/* dependency */);
	}
	return g_mainapp.get();
}

MainApp::MainApp(/* dependency */): kosongg::EngineBase(/* dependency */) {
	m_impl = std::make_unique<Impl>();
	m_windowTitle = "{{ project_name }}";
}

MainApp::~MainApp() {
}

void MainApp::UpdateHsCpp() {
	Globals *globals = Globals::Resolve();

#ifdef _USE_HSCPP_
	auto updateResult = m_impl->swapper->Update();

	if (!globals->pHsCppProgress) {
		globals->pHsCppProgress = std::make_unique<HsCppProgress>();
	}

	switch (updateResult) {
		case hscpp::Hotswapper::UpdateResult::Compiling:
			globals->pHsCppProgress->lastCompilingText = "Compiling";
			globals->pHsCppProgress->lastCompilingColor = {222, 222, 0};
			globals->pHsCppProgress->lastElapsedCompileTime = std::chrono::high_resolution_clock::now() - globals->pHsCppProgress->startCompileTime;
			break;
		case hscpp::Hotswapper::UpdateResult::StartedCompiling:
			globals->pHsCppProgress->startCompileTime = std::chrono::high_resolution_clock::now();
			break;
		case hscpp::Hotswapper::UpdateResult::PerformedSwap:
			globals->pHsCppProgress->lastCompilingText = "PerformedSwap";
			break;
		case hscpp::Hotswapper::UpdateResult::FailedSwap:
			globals->pHsCppProgress->lastCompilingColor = {172, 0, 0};
			globals->pHsCppProgress->lastCompilingText = "FailedSwap";
			break;
		default:
			switch (globals->pHsCppProgress->lastUpdateResult) {
				case (int)hscpp::Hotswapper::UpdateResult::Compiling:
					globals->pHsCppProgress->lastCompilingColor = {172, 0, 0};
					globals->pHsCppProgress->lastCompilingText = "Error";
					break;
				case (int)hscpp::Hotswapper::UpdateResult::PerformedSwap:
					globals->pHsCppProgress->lastCompilingColor = {0, 172, 0};
					globals->pHsCppProgress->lastCompilingText = "Success";
					break;
				default:
					break;
			};
	};
	globals->pHsCppProgress->lastUpdateResult = (int)updateResult;
#endif
}

void MainApp::RunImGui() {
	Globals *globals = Globals::Resolve();

	UpdateHsCpp();

	globals->pMainWidget->Update();

#ifdef _USE_IFD_
	if (ifd::FileDialog::Instance().IsDone("MultiFileOpenDialog")) {
		if (ifd::FileDialog::Instance().HasResult()) {
						const std::vector<std::filesystem::path>& res = ifd::FileDialog::Instance().GetResults();
						for (const auto& r : res) { // MidiFileOpenDialog supports multiselection
							// TODO: handle each files
							std::cerr << "open dialog: " << r.u8string() << std::endl;
						}
		}
		ifd::FileDialog::Instance().Close();
	}
#endif
}

void MainApp::Init(std::vector<std::string> &args) {
	m_impl->globals = std::make_unique<Globals>();
	m_impl->globals->getResourcePath = std::bind(&MainApp::GetResourcePath, this, std::placeholders::_1, std::placeholders::_2);

	ReadIniConfig();
	// InitSDL & InitImGui
	EngineBase::Init(args);

	m_impl->globals->pImGuiContext = ImGui::GetCurrentContext();

#ifdef _USE_HSCPP_
	auto projPath = hscpp::fs::canonical( hscpp::fs::path(_PROJECT_SRC_PATH_) );

	auto swapperConfig = std::make_unique<hscpp::Config>();
	swapperConfig->compiler.projPath = projPath.u8string();
	swapperConfig->compiler.ninja = true;
	std::cerr << "ninja path = " << swapperConfig->compiler.ninjaExecutable << std::endl;

	m_impl->swapper = std::make_unique<hscpp::Hotswapper>(std::move(swapperConfig));
	m_impl->swapper->EnableFeature(hscpp::Feature::Preprocessor);
	m_impl->swapper->EnableFeature(hscpp::Feature::DependentCompilation);
#ifdef _WIN32
	m_impl->swapper->SetVar("os", "Windows");
#elif defined(__APPLE__)
	m_impl->swapper->SetVar("os", "Darwin");
#else
	m_impl->swapper->SetVar("os", "Linux");
#endif
	m_impl->swapper->SetVar("projPath", projPath.u8string());

#ifdef _USE_IFD_
	m_impl->swapper->SetVar("use_ifd", true);
	m_impl->swapper->AddPreprocessorDefinition("_USE_IFD_");
#else
 	m_impl->swapper->SetVar("use_ifd", false);
#endif

	// Source directory to watchs
	m_impl->swapper->AddSourceDirectory(projPath / "src/watched");
	m_impl->swapper->AddSourceDirectory(projPath / "kosongg/cpp/imkosongg");

	auto buildPath = hscpp::util::GetHscppBuildPath();
	m_impl->swapper->SetVar("buildPath", buildPath.u8string());
	m_impl->swapper->AddPreprocessorDefinition("_USE_HSCPP_");
#ifdef IMGUI_USER_CONFIG
	std::string imgui_defs = "IMGUI_USER_CONFIG=\\\"" + hscpp::fs::path(IMGUI_USER_CONFIG).u8string() + "\\\"";
	//std::string imgui_defs = fmt::format("IMGUI_USER_CONFIG=\\\"{}\\\"", hscpp::fs::path(IMGUI_USER_CONFIG).u8string())
	m_impl->swapper->AddPreprocessorDefinition(imgui_defs);
#endif
#ifdef imgui_IMPORTS
	m_impl->swapper->AddPreprocessorDefinition("imgui_IMPORTS"); // if BUILD_SHARED
#endif

	hscpp::mem::MemoryManager::Config config;
	config.pAllocationResolver = m_impl->swapper->GetAllocationResolver();
	m_impl->memoryManager = hscpp::mem::MemoryManager::Create(config);
	m_impl->swapper->SetAllocator(&m_impl->memoryManager);

	m_impl->swapper->SetGlobalUserData(m_impl->globals.get());

	m_impl->globals->pMemoryManager = &m_impl->memoryManager;
	m_impl->globals->pMainWidget = m_impl->memoryManager->Allocate<MainWidget>();
	m_impl->globals->pImKosongg = m_impl->memoryManager->Allocate<ImKosongg>();
#else
	Globals::SetGlobalUserData(m_impl->globals.get());

	m_impl->globals->pMainWidget = std::make_unique<MainWidget>();
	m_impl->globals->pImKosongg = std::make_unique<ImKosongg>();
#endif

#ifdef _USE_IFD_
	// ImFileDialog requires you to set the CreateTexture and DeleteTexture
	ifd::FileDialog::Instance().CreateTexture = ifd::openglCreateTexture;
	ifd::FileDialog::Instance().DeleteTexture = ifd::openglDeleteTexture;
#endif
}

void MainApp::Clean() {
	// Place your globals cleanup here!

	#ifdef _USE_HSCPP_
		m_impl->globals.reset();
		m_impl->swapper.reset();
	#endif

	EngineBase::Clean();
}

void MainApp::ReadIniConfig() {
	const char * homepath = nullptr;
#ifdef _WIN32
	homepath = std::getenv("USERPROFILE");
#else
	homepath = std::getenv("HOME");
#endif

	std::cout << "Home:" << homepath << std::endl;

	std::string iniPath = GetResourcePath("configs", "{{ project_name }}.ini");
	const char * inifilename = iniPath.c_str();

	mINI::INIFile inifile(inifilename);
	mINI::INIStructure ini;
	if (!inifile.read(ini)) {
		std::cout << "Can't load:" << inifilename << std::endl;
		return;
	}
	for (auto const & [sectionName, section]: ini) {
		std::cout << "[" << sectionName << "]" << std::endl;
		for (auto const & value: section) {
			std::cout << "\t" << value.first << " = " << value.second << std::endl;
		}
	}
}

std::string MainApp::GetResourcePath(const char *path, const char *file) {
	std::filesystem::path spath(path);
#ifdef BUILD_APPLE_BUNDLE
	if (spath == "kosongg/fonts") spath = "fonts";
#endif
	std::filesystem::path sfile(file);
	std::string res((spath / sfile).u8string());
#ifdef BUILD_APPLE_BUNDLE
	res = GetBundleResourcePath(res.c_str());
#endif
	return res;
}
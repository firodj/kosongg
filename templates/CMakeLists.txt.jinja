cmake_minimum_required(VERSION {{ cmake_min_version }})
project({{ project_name }})

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")
set(CMAKE_CXX_STANDARD {{ cpp_std }})
set(CMAKE_C_STANDARD {{ c_std }})
set(VENDOR_DIR kosongg/cpp)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

if (APPLE)
  ## update the environment with VIRTUAL_ENV variable (mimic the activate script)
  set (ENV{VIRTUAL_ENV} "${CMAKE_SOURCE_DIR}/venv")
  ## change the context of the search
  set (Python3_FIND_VIRTUALENV FIRST)
  ## unset Python3_EXECUTABLE because it is also an input variable (see documentation, Artifacts Specification section)
  unset (Python3_EXECUTABLE)
endif()

{%- for lib in libraries -%}
{%- for opt in lib.options if lib.options %}
option("{{ opt.name }}" "{{ opt.help }}" {{ opt.value | value_format }})
{%- endfor %}
{%- for req in lib.requires if lib.requires %}
find_package({{ req }} REQUIRED)
{%- endfor %}
{%- endfor %}

{%- for lib in libraries -%}
{%- for set in lib.sets if lib.sets %}
set("{{ set.name }}" {{ set.value | value_format }})
{%- endfor %}
{%- if lib.path %}
add_subdirectory({{ lib.path }})
{%- endif %}
{%- for cmd in lib.cmds if lib.cmds %}
{{ cmd }}
{%- endfor %}
{%- endfor %}

include_directories(SYSTEM
{%- for lib in libraries -%}
{% for inc in lib.include_dirs if lib.include_dirs %}
  {{ inc }}
{%- endfor %}
{%- endfor %}
)

set(SOURCE
  ${VENDOR_DIR}/main.cpp
  ${VENDOR_DIR}/Engine.cpp
  ${VENDOR_DIR}/GLUtil.cpp
  ${VENDOR_DIR}/Component.cpp
  ${VENDOR_DIR}/UtfConv.c

{%- for lib in libraries -%}
{% for src in lib.sources if lib.sources %}
  {{ src }}
{%- endfor %}
{%- endfor %}
## -- sources --
{%- for src in sources %}
  {{ src }}
{%- endfor %}
## -- endsources --
)

set(HEADERS
  ${VENDOR_DIR}/kosongg/Engine.h
  ${VENDOR_DIR}/kosongg/GLUtil.h
  ${VENDOR_DIR}/kosongg/Component.h
  ${VENDOR_DIR}/kosongg/UtfConv.h
## -- headers --
{%- for hdr in headers %}
  {{ hdr }}
{%- endfor %}
## -- endheaders --
)

include_directories(
  ${VENDOR_DIR}
  src
)

add_executable({{ project_name }}
  ${SOURCE} ${HEADERS}
)

source_group("Source Files" FILES ${SOURCE})
source_group("Header Files" FILES ${HEADERS})

# ImFileDialog (ifd)
list(APPEND ifd_SOURCES
  ${VENDOR_DIR}/ifd/ImFileDialog.cpp
  ${VENDOR_DIR}/ifd/ImFileDialog.hpp
)

if (APPLE)
  list(APPEND ifd_SOURCES
    ${VENDOR_DIR}/ifd/ImFileDialog_osx.mm
    ${VENDOR_DIR}/ifd/ImFileDialog_osx.hpp
  )
endif()
if (WIN32)
  list(APPEND ifd_SOURCES
    ${VENDOR_DIR}/ifd/ImFileDialog_win32.cpp
    ${VENDOR_DIR}/ifd/ImFileDialog_win32.hpp
  )
endif()
if (LINUX)
  list(APPEND ifd_SOURCES
    ${VENDOR_DIR}/ifd/ImFileDialog_linux.cpp
    ${VENDOR_DIR}/ifd/ImFileDialog_linux.hpp
  )
endif()

add_library(ifd STATIC ${ifd_SOURCES})

if (APPLE)
  # Cocoa
  find_library(COCOA_LIBRARY Cocoa)
  find_library(APPKIT_LIB AppKit)
  target_link_libraries(ifd PUBLIC ${COCOA_LIBRARY} ${APPKIT_LIB})
endif()

if (MSVC)
{%- if msvc.link_libs %}
  target_link_libraries({{ project_name }}
{%- for libname in msvc.link_libs %}
    {{ libname }}
{%- endfor %}
  )
{%- endif %}

  # Silence MSVC CRT security warnings
  add_compile_definitions(_CRT_SECURE_NO_WARNINGS
{% for def in msvc.defs if msvc.defs %}
    {{ def }}
{%- endfor %}
  )

  if (USE_ASAN)
    target_compile_options({{ project_name }} PRIVATE /fsanitize=address)
  endif()
else()
  target_compile_options({{ project_name }} PRIVATE -Wno-deprecated)
  if (USE_ASAN)
    target_compile_options({{ project_name }} PRIVATE -fsanitize=address)
    target_link_options({{ project_name }} PRIVATE -fsanitize=address)
  endif()
  if (APPLE)
    if (CMAKE_GENERATOR STREQUAL Xcode)
      set_target_properties({{ project_name }} PROPERTIES XCODE_ATTRIBUTE_DEBUG_INFORMATION_FORMAT "dwarf-with-dsym")
    else()
      add_custom_command(
        TARGET {{ project_name }}
        POST_BUILD
        COMMAND dsymutil $<TARGET_FILE:{{ project_name }}>
      )
    endif()
  endif()
endif()

add_compile_definitions(_USE_
{%- for lib in libraries -%}
{% for def in lib.defs if lib.defs %}
  {{ def }}
{%- endfor %}
{%- endfor %}
)

target_link_libraries({{ project_name }}
{%- for lib in libraries -%}
{% for libname in lib.link_libs if lib.link_libs %}
  {{ libname }}
{%- endfor %}
{%- endfor %}
  ifd
)

set_target_properties({{ project_name }} PROPERTIES
  RUNTIME_OUTPUT_DIRECTORY_DEBUG "${CMAKE_SOURCE_DIR}"
  VS_DEBUGGER_WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}"
  DEBUG_POSTFIX "d"
)

set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT {{ project_name }})

## -- others --
{%- for oth in others %}
{{ oth }}
{%- endfor %}
## -- endothers --
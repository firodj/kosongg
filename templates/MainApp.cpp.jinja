#include "MainApp.hpp"
#include <thread>
#include <mutex>

static std::unique_ptr<MainApp> g_mainapp;

static std::mutex g_mainapp_mutex;

struct MainApp::MainAppImpl {
  /* private implementations */
};

MainApp *MainApp::GetInstance(/* dependency */) {
  std::lock_guard<std::mutex> lock(g_mainapp_mutex);
  if (g_mainapp == nullptr) {
    g_mainapp = std::unique_ptr<MainApp>(new MainApp(/* dependency */));
  }
  return g_mainapp.get();
}

MainApp::MainApp(/* dependency */) {
  impl_ = std::make_unique<MainAppImpl>();
}

MainApp::~MainApp() {
}
